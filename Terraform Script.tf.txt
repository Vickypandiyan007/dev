provider "aws" {
  region = "ap-south-1"
}

resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-south-1a"
}

resource "aws_subnet" "private_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-south-1b"
}

resource "aws_instance" "public_ec2_instance" {
  count         = 2
  ami           = "ami-xxxxxxxx"  # Specify the desired AMI ID
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.public_subnet.id
  associate_public_ip_address = true
  root_block_device {
    volume_size = 100
  }
}

resource "aws_instance" "private_ec2_instance" {
  count         = 2
  ami           = "ami-xxxxxxxx"  # Specify the desired AMI ID
  instance_type = "t2.micro"
  subnet_id     = aws_subnet.private_subnet.id
  root_block_device {
    volume_size = 100
  }
}

resource "aws_eip" "nat_eip" {
  vpc = true
}

resource "aws_nat_gateway" "nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id
}

resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    gateway_id     = aws_nat_gateway.nat_gateway.id
  }
}

resource "aws_route_table_association" "public_subnet_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_lb" "load_balancer" {
  name               = "my-load-balancer"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.private_subnet.id]
}

resource "aws_autoscaling_group" "auto_scaling_group" {
  name                     = "my-auto-scaling-group"
  launch_configuration    = aws_launch_configuration.launch_config.name
  min_size                 = 2
  max_size                 = 2
  desired_capacity         = 2
  health_check_type        = "ELB"
  vpc_zone_identifier      = [aws_subnet.private_subnet.id]
}

resource "aws_launch_configuration" "launch_config" {
  name_prefix        = "my-launch-config-"
  image_id           = "ami-xxxxxxxx"  # Specify the desired AMI ID
  instance_type      = "t2.micro"
  security_group_ids = [aws_security_group.load_balancer_sg.id]
  user_data          = <<-EOF
    #!/bin/bash
    echo "Hello, World!" > index.html
    nohup python -m SimpleHTTPServer 80 &
  EOF
}

resource "aws_security_group" "load_balancer_sg" {
  name        = "load-balancer-sg"
  description = "Security group for load balancer"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
